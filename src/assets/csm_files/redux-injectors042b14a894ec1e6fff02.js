"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcsm_fe"] = self["webpackChunkcsm_fe"] || []).push([["redux-injectors"],{

/***/ "./node_modules/redux-injectors/dist/index.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/redux-injectors/dist/index.esm.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createInjectorsEnhancer\": () => (/* binding */ createInjectorsEnhancer),\n/* harmony export */   \"forceReducerReload\": () => (/* binding */ forceReducerReload)\n/* harmony export */ });\n/* unused harmony exports SagaInjectionModes, injectReducer, injectSaga, useInjectReducer, useInjectSaga */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hoist-non-react-statics */ \"./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-redux */ \"./node_modules/react-redux/es/index.js\");\n/* harmony import */ var invariant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! invariant */ \"./node_modules/invariant/browser.js\");\n/* harmony import */ var invariant__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(invariant__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/isEmpty */ \"./node_modules/lodash/isEmpty.js\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_isFunction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/isFunction */ \"./node_modules/lodash/isFunction.js\");\n/* harmony import */ var lodash_isFunction__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_isFunction__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/isString */ \"./node_modules/lodash/isString.js\");\n/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_isString__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var lodash_conformsTo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/conformsTo */ \"./node_modules/lodash/conformsTo.js\");\n/* harmony import */ var lodash_conformsTo__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(lodash_conformsTo__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var lodash_isObject__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/isObject */ \"./node_modules/lodash/isObject.js\");\n/* harmony import */ var lodash_isObject__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(lodash_isObject__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\n\n/**\n * Forces a reload of the injected reducers. i.e. Causes `createReducer` to be\n * called again with the injected reducers. Useful for hot-reloading.\n *\n * @param store The redux store that has been configured with\n *                  `createInjectorsEnhancer`\n * @example\n * forceReducerReload(store);\n *\n * @public\n */\nfunction forceReducerReload(store) {\n  store.replaceReducer(store.createReducer(store.injectedReducers));\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\n/**\n * Validates the redux store is set up properly to work with this library.\n */\n\nfunction checkStore(store) {\n  var shape = {\n    dispatch: (lodash_isFunction__WEBPACK_IMPORTED_MODULE_5___default()),\n    subscribe: (lodash_isFunction__WEBPACK_IMPORTED_MODULE_5___default()),\n    getState: (lodash_isFunction__WEBPACK_IMPORTED_MODULE_5___default()),\n    replaceReducer: (lodash_isFunction__WEBPACK_IMPORTED_MODULE_5___default()),\n    runSaga: (lodash_isFunction__WEBPACK_IMPORTED_MODULE_5___default()),\n    createReducer: (lodash_isFunction__WEBPACK_IMPORTED_MODULE_5___default()),\n    injectedReducers: (lodash_isObject__WEBPACK_IMPORTED_MODULE_8___default()),\n    injectedSagas: (lodash_isObject__WEBPACK_IMPORTED_MODULE_8___default())\n  };\n  invariant__WEBPACK_IMPORTED_MODULE_3___default()(lodash_conformsTo__WEBPACK_IMPORTED_MODULE_7___default()(store, shape), '(redux-injectors...) checkStore: Expected a redux store that has been configured for use with redux-injectors.');\n}\n\nfunction injectReducerFactory(store, isValid) {\n  return function injectReducer(key, reducer) {\n    if (!isValid) checkStore(store);\n    invariant__WEBPACK_IMPORTED_MODULE_3___default()(lodash_isString__WEBPACK_IMPORTED_MODULE_6___default()(key) && !lodash_isEmpty__WEBPACK_IMPORTED_MODULE_4___default()(key) && lodash_isFunction__WEBPACK_IMPORTED_MODULE_5___default()(reducer), '(redux-injectors...) injectReducer: Expected `reducer` to be a reducer function'); // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n\n    if (Reflect.has(store.injectedReducers, key) && store.injectedReducers[key] === reducer) return;\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\n\n    store.replaceReducer(store.createReducer(store.injectedReducers));\n  };\n}\nfunction getInjectors(store) {\n  checkStore(store);\n  return {\n    injectReducer: injectReducerFactory(store, true)\n  };\n}\n\n/**\n * A higher-order component that dynamically injects a reducer when the\n * component is instantiated\n *\n * @param {Object} params\n * @param {string} params.key The key to inject the reducer under\n * @param {function} params.reducer The reducer that will be injected\n *\n * @example\n *\n * class BooksManager extends React.PureComponent {\n *   render() {\n *     return null;\n *   }\n * }\n *\n * export default injectReducer({ key: \"books\", reducer: booksReducer })(BooksManager)\n *\n * @public\n */\n\nvar injectReducer = (function (_ref) {\n  var key = _ref.key,\n      reducer = _ref.reducer;\n  return function (WrappedComponent) {\n    var ReducerInjector =\n    /*#__PURE__*/\n    function (_React$Component) {\n      _inherits(ReducerInjector, _React$Component);\n\n      function ReducerInjector(props, context) {\n        var _this;\n\n        _classCallCheck(this, ReducerInjector);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(ReducerInjector).call(this, props, context));\n        getInjectors(context.store).injectReducer(key, reducer);\n        return _this;\n      }\n\n      _createClass(ReducerInjector, [{\n        key: \"render\",\n        value: function render() {\n          return react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrappedComponent, this.props);\n        }\n      }]);\n\n      return ReducerInjector;\n    }(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n\n    _defineProperty(ReducerInjector, \"WrappedComponent\", WrappedComponent);\n\n    _defineProperty(ReducerInjector, \"contextType\", react_redux__WEBPACK_IMPORTED_MODULE_2__.ReactReduxContext);\n\n    _defineProperty(ReducerInjector, \"displayName\", \"withReducer(\".concat(WrappedComponent.displayName || WrappedComponent.name || 'Component', \")\"));\n\n    return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1___default()(ReducerInjector, WrappedComponent);\n  };\n});\n/**\n * A react hook that dynamically injects a reducer when the hook is run\n *\n * @param {Object} params\n * @param {string} params.key The key to inject the reducer under\n * @param {function} params.reducer The reducer that will be injected\n *\n * @example\n *\n * function BooksManager() {\n *   useInjectReducer({ key: \"books\", reducer: booksReducer })\n *\n *   return null;\n * }\n *\n * @public\n */\n\nvar useInjectReducer = function useInjectReducer(_ref2) {\n  var key = _ref2.key,\n      reducer = _ref2.reducer;\n  var store = (0,react_redux__WEBPACK_IMPORTED_MODULE_2__.useStore)();\n  var isInjected = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n\n  if (!isInjected.current) {\n    getInjectors(store).injectReducer(key, reducer);\n    isInjected.current = true;\n  }\n};\n\nvar RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\nvar DAEMON = '@@saga-injector/daemon';\nvar ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';\n/**\n * An enum of all the possible saga injection behaviours\n *\n * @property {String} RESTART_ON_REMOUNT The saga will be started on component instantiation and cancelled with\n * `task.cancel()` on component unmount for improved performance.\n * @property {String} DAEMON Causes the saga to be started on component instantiation and never canceled\n * or started again.\n * @property {String} ONCE_TILL_UNMOUNT Behaves like 'RESTART_ON_REMOUNT' but never runs it again.\n *\n * @enum\n * @public\n */\n\nvar SagaInjectionModes = {\n  RESTART_ON_REMOUNT: RESTART_ON_REMOUNT,\n  DAEMON: DAEMON,\n  ONCE_TILL_UNMOUNT: ONCE_TILL_UNMOUNT\n};\n\nvar allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\n\nvar checkKey = function checkKey(key) {\n  return invariant__WEBPACK_IMPORTED_MODULE_3___default()(lodash_isString__WEBPACK_IMPORTED_MODULE_6___default()(key) && !lodash_isEmpty__WEBPACK_IMPORTED_MODULE_4___default()(key), '(redux-injectors...) injectSaga: Expected `key` to be a non empty string');\n};\n\nvar checkDescriptor = function checkDescriptor(descriptor) {\n  var shape = {\n    saga: (lodash_isFunction__WEBPACK_IMPORTED_MODULE_5___default()),\n    mode: function mode(_mode) {\n      return lodash_isString__WEBPACK_IMPORTED_MODULE_6___default()(_mode) && allowedModes.includes(_mode);\n    }\n  };\n  invariant__WEBPACK_IMPORTED_MODULE_3___default()(lodash_conformsTo__WEBPACK_IMPORTED_MODULE_7___default()(descriptor, shape), '(redux-injectors...) injectSaga: Expected a valid saga descriptor');\n};\n\nfunction injectSagaFactory(store, isValid) {\n  return function injectSaga(key) {\n    var descriptor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!isValid) checkStore(store);\n\n    var newDescriptor = _objectSpread2({}, descriptor, {\n      mode: descriptor.mode || DAEMON\n    });\n\n    var saga = newDescriptor.saga,\n        mode = newDescriptor.mode;\n    checkKey(key);\n    checkDescriptor(newDescriptor);\n    var hasSaga = Reflect.has(store.injectedSagas, key);\n\n    if (true) {\n      var oldDescriptor = store.injectedSagas[key]; // enable hot reloading of daemon and once-till-unmount sagas\n\n      if (hasSaga && oldDescriptor.saga !== saga) {\n        oldDescriptor.task.cancel();\n        hasSaga = false;\n      }\n    }\n\n    if (!hasSaga || hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT) {\n      /* eslint-disable no-param-reassign */\n      store.injectedSagas[key] = _objectSpread2({}, newDescriptor, {\n        task: store.runSaga(saga)\n      });\n      /* eslint-enable no-param-reassign */\n    }\n  };\n}\nfunction ejectSagaFactory(store, isValid) {\n  return function ejectSaga(key) {\n    if (!isValid) checkStore(store);\n    checkKey(key);\n\n    if (Reflect.has(store.injectedSagas, key)) {\n      var descriptor = store.injectedSagas[key];\n\n      if (descriptor.mode && descriptor.mode !== DAEMON) {\n        descriptor.task.cancel(); // Clean up in production; in development we need `descriptor.saga` for hot reloading\n\n        if (false) {}\n      }\n    }\n  };\n}\nfunction getInjectors$1(store) {\n  checkStore(store);\n  return {\n    injectSaga: injectSagaFactory(store, true),\n    ejectSaga: ejectSagaFactory(store, true)\n  };\n}\n\n/**\n * A higher-order component that dynamically injects a saga when the component\n * is instantiated. There are several possible \"modes\" / \"behaviours\" that\n * dictate how and when the saga should be injected and ejected\n *\n * @param {Object} params\n * @param {string} params.key The key to inject the saga under\n * @param {function} params.saga The saga that will be injected\n * @param {string} [params.mode] The injection behaviour to use. The default is\n * `SagaInjectionModes.DAEMON` which causes the saga to be started on component\n * instantiation and never canceled or started again. @see\n * {@link SagaInjectionModes} for the other possible modes.\n *\n * @example\n *\n * class BooksManager extends React.PureComponent {\n *  render() {\n *    return null;\n *  }\n * }\n *\n * export default injectSaga({ key: \"books\", saga: booksSaga })(BooksManager)\n *\n * @public\n *\n */\n\nvar injectSaga = (function (_ref) {\n  var key = _ref.key,\n      saga = _ref.saga,\n      mode = _ref.mode;\n  return function (WrappedComponent) {\n    var InjectSaga =\n    /*#__PURE__*/\n    function (_React$Component) {\n      _inherits(InjectSaga, _React$Component);\n\n      function InjectSaga(props, context) {\n        var _this;\n\n        _classCallCheck(this, InjectSaga);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(InjectSaga).call(this, props, context));\n        _this.injectors = getInjectors$1(context.store);\n\n        _this.injectors.injectSaga(key, {\n          saga: saga,\n          mode: mode\n        });\n\n        return _this;\n      }\n\n      _createClass(InjectSaga, [{\n        key: \"componentWillUnmount\",\n        value: function componentWillUnmount() {\n          this.injectors.ejectSaga(key);\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          return react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrappedComponent, this.props);\n        }\n      }]);\n\n      return InjectSaga;\n    }(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n\n    _defineProperty(InjectSaga, \"WrappedComponent\", WrappedComponent);\n\n    _defineProperty(InjectSaga, \"contextType\", react_redux__WEBPACK_IMPORTED_MODULE_2__.ReactReduxContext);\n\n    _defineProperty(InjectSaga, \"displayName\", \"withSaga(\".concat(WrappedComponent.displayName || WrappedComponent.name || 'Component', \")\"));\n\n    return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_1___default()(InjectSaga, WrappedComponent);\n  };\n});\n/**\n * A react hook that dynamically injects a saga when the hook is run\n *\n * @param {Object} params\n * @param {string} params.key The key to inject the saga under\n * @param {function} params.saga The saga that will be injected\n * @param {string} [params.mode] The injection behaviour to use. The default is\n * `SagaInjectionModes.DAEMON` which causes the saga to be started on component\n * instantiation and never canceled or started again. @see\n * {@link SagaInjectionModes} for the other possible modes.\n *\n * @example\n *\n * function BooksManager() {\n *   useInjectSaga({ key: \"books\", saga: booksSaga })\n *\n *   return null;\n * }\n *\n * @public\n */\n\nvar useInjectSaga = function useInjectSaga(_ref2) {\n  var key = _ref2.key,\n      saga = _ref2.saga,\n      mode = _ref2.mode;\n  var store = (0,react_redux__WEBPACK_IMPORTED_MODULE_2__.useStore)();\n  var isInjected = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n\n  if (!isInjected.current) {\n    getInjectors$1(store).injectSaga(key, {\n      saga: saga,\n      mode: mode\n    });\n    isInjected.current = true;\n  }\n\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    return function () {\n      getInjectors$1(store).ejectSaga(key);\n    };\n  }, []);\n};\n\n/**\n * Creates a store enhancer that when applied will setup the store to allow the\n * injectors to work properly\n *\n * @param {Object} params\n * @param {function} params.runSaga A function that runs a saga. Should usually be `sagaMiddleware.run`\n * @param {function} params.createReducer A function that should create and\n * return the root reducer. It's passed the injected reducers as the first\n * parameter. These should be added to the root reducer using `combineReducer`\n * or a similar method.\n *\n * @example\n *\n * import { createStore } from \"redux\"\n * import { createInjectorsEnhancer } from \"redux-injectors\"\n *\n * function createReducer(injectedReducers = {}) {\n *  const rootReducer = combineReducers({\n *    ...injectedReducers,\n *    // other non-injected reducers can go here...\n *  });\n *\n *  return rootReducer\n * }\n * const runSaga = sagaMiddleware.run\n *\n * const store = createStore(\n *   createReducer(),\n *   initialState,\n *   createInjectorsEnhancer({\n *     createReducer,\n *     runSaga,\n *   })\n * )\n *\n * @public\n */\n\nfunction createInjectorsEnhancer(params) {\n  invariant__WEBPACK_IMPORTED_MODULE_3___default()(lodash_conformsTo__WEBPACK_IMPORTED_MODULE_7___default()(params, {\n    runSaga: (lodash_isFunction__WEBPACK_IMPORTED_MODULE_5___default()),\n    createReducer: (lodash_isFunction__WEBPACK_IMPORTED_MODULE_5___default())\n  }), '(redux-injectors...) createInjectorsEnhancer: params `runSaga` and ' + '`createReducer` are required.');\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n      return _objectSpread2({}, store, {\n        createReducer: params.createReducer,\n        runSaga: params.runSaga,\n        injectedReducers: {},\n        // Reducer registry\n        injectedSagas: {} // Saga registry\n\n      });\n    };\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/redux-injectors/dist/index.esm.js\n");

/***/ })

}]);